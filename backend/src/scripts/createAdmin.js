// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import 'dotenv/config';

const prisma = new PrismaClient();

async function createAdmin() {
    try {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞...');

        const adminName = 'admin';
        const adminPassword = 'admin123'; // –í–†–ï–ú–ï–ù–ù–´–ô –ø–∞—Ä–æ–ª—å!
        const hashedPassword = await bcrypt.hash(adminPassword, 10);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
        const existingAdmin = await prisma.user.findUnique({
            where: { name: adminName }
        });

        if (existingAdmin) {
            console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
            await prisma.user.update({
                where: { name: adminName },
                data: {
                    password: hashedPassword,
                    role: 'ADMIN'
                }
            });
        } else {
            console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞...');
            await prisma.user.create({
                data: {
                    name: adminName,
                    password: hashedPassword,
                    role: 'ADMIN'
                }
            });
        }

        console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω!');
        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
        console.log(`   –õ–æ–≥–∏–Ω: ${adminName}`);
        console.log(`   –ü–∞—Ä–æ–ª—å: ${adminPassword}`);
        console.log('‚ö†Ô∏è  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

createAdmin(); 