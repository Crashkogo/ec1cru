# Project Rules для Cursor IDE

## ОБЯЗАТЕЛЬНОЕ ПРАВИЛО
**Все ответы и комментарии в коде ОБЯЗАТЕЛЬНО должны быть на русском языке.**

## Архитектура проекта

Это full-stack приложение с разделением на frontend и backend:

### Frontend (React + TypeScript)
- **Фреймворк**: React 18 с TypeScript
- **Сборщик**: Vite
- **Стилизация**: Tailwind CSS + Material-UI (@mui/material)
- **Роутинг**: React Router DOM v7
- **Состояние**: Redux Toolkit + React Query
- **Формы**: React Hook Form + Zod валидация
- **Админка**: React Admin
- **Анимации**: Framer Motion
- **Тестирование**: Vitest + Testing Library

### Backend (Node.js + TypeScript)
- **Фреймворк**: Express.js
- **База данных**: Prisma ORM
- **Аутентификация**: JWT + bcrypt
- **Email**: Nodemailer
- **Логирование**: Winston
- **CORS**: cors middleware
- **Переменные окружения**: dotenv

## Правила разработки

### Общие правила
1. **Язык**: Весь код, комментарии и документация на русском языке
2. **TypeScript**: Строгая типизация, избегать `any`
3. **Именование**: camelCase для переменных и функций, PascalCase для компонентов и типов
4. **Структура**: Следовать существующей архитектуре папок
5. **Импорты**: Использовать абсолютные импорты где возможно

### Frontend правила
1. **Компоненты React**:
   - Функциональные компоненты с хуками
   - TypeScript интерфейсы для props
   - Деструктуризация props
   - Мемоизация с React.memo при необходимости

2. **Стилизация**:
   - Приоритет Tailwind CSS классам
   - Material-UI компоненты для сложных элементов
   - CSS Modules для кастомных стилей
   - Responsive дизайн (mobile-first)

3. **Состояние**:
   - Redux Toolkit для глобального состояния
   - React Query для серверного состояния
   - useState для локального состояния компонентов
   - useReducer для сложной логики

4. **Формы**:
   - React Hook Form для всех форм
   - Zod схемы для валидации
   - Обработка ошибок на клиенте
   - Показ состояния загрузки

5. **Структура компонентов**:
   ```
   src/
   ├── components/     # Переиспользуемые компоненты
   ├── pages/         # Страницы приложения
   ├── admin/         # React Admin компоненты
   ├── redux/         # Redux слайсы и store
   ├── types/         # TypeScript типы
   ├── utils/         # Утилиты и хелперы
   └── assets/        # Статические файлы
   ```

### Backend правила
1. **API структура**:
   - RESTful API дизайн
   - Middleware для аутентификации
   - Валидация данных с Zod
   - Обработка ошибок

2. **База данных**:
   - Prisma схемы в schema.prisma
   - Миграции для изменений БД
   - Seed данные для разработки
   - Типизированные запросы

3. **Безопасность**:
   - JWT токены для аутентификации
   - bcrypt для хеширования паролей
   - CORS настройки
   - Валидация входных данных

4. **Структура backend**:
   ```
   src/
   ├── controllers/   # Контроллеры API
   ├── routes/        # Маршруты Express
   ├── middleware/    # Middleware функции
   ├── types/         # TypeScript типы
   └── config.ts      # Конфигурация
   ```

### Качество кода
1. **Линтинг**: ESLint + Prettier (frontend)
2. **Тестирование**: Vitest для unit тестов
3. **Коммиты**: Осмысленные сообщения на русском
4. **Документация**: JSDoc комментарии для сложных функций

### Производительность
1. **Lazy loading** для компонентов
2. **Мемоизация** дорогих вычислений
3. **Оптимизация изображений**
4. **Code splitting** с Vite

### Рабочий процесс
1. **Разработка**:
   - `npm run dev` в frontend и backend папках
   - Горячая перезагрузка включена
   - Используйте браузерные dev tools

2. **Сборка**:
   - `npm run build` для production сборки
   - TypeScript компиляция в dist/

3. **Тестирование**:
   - `npm test` для запуска тестов
   - Покрытие кода с `npm run test:coverage`

## Специфичные паттерны

### React Query
```typescript
// Пример хука для данных
const useПользователи = () => {
  return useQuery({
    queryKey: ['пользователи'],
    queryFn: () => апиКлиент.получитьПользователей(),
  });
};
```

### Redux Toolkit
```typescript
// Пример слайса
const пользовательСлайс = createSlice({
  name: 'пользователь',
  initialState,
  reducers: {
    установитьПользователя: (state, action) => {
      state.текущийПользователь = action.payload;
    },
  },
});
```

### Prisma модели
```typescript
// Пример использования Prisma
const пользователи = await prisma.пользователь.findMany({
  include: {
    профиль: true,
  },
});
```

## Соглашения об именовании

### Файлы и папки
- Компоненты: `ИмяКомпонента.tsx`
- Хуки: `useИмяХука.ts`
- Утилиты: `имяУтилиты.ts`
- Типы: `типы.ts` или `index.ts`

### Переменные и функции
- camelCase: `имяПеременной`, `имяФункции`
- Boolean: `является...`, `имеет...`, `можно...`
- Функции: глаголы (`получить`, `создать`, `обновить`, `удалить`)

### Компоненты
- PascalCase: `ГлавнаяСтраница`, `КнопкаОтправки`
- Props интерфейсы: `ИИмяКомпонентаProps`

## Обработка ошибок

### Frontend
```typescript
try {
  await отправитьФорму(данные);
  показатьУспех('Данные сохранены');
} catch (ошибка) {
  показатьОшибку('Не удалось сохранить данные');
  консоль.error(ошибка);
}
```

### Backend
```typescript
app.use((ошибка: Error, req: Request, res: Response, next: NextFunction) => {
  логгер.error(ошибка.message);
  res.status(500).json({ ошибка: 'Внутренняя ошибка сервера' });
});
```

## Git workflow
1. Ветки на русском: `фича/новая-функция`, `исправление/баг-123`
2. Коммиты: `добавить: новый компонент пользователя`
3. Pull requests с описанием на русском

Помните: всегда пишите код так, будто его будет читать другой разработчик!